name: 'Terraform CI'

on:
  workflow_dispatch:
    branches: [ main ]
    
defaults:
  run:
    working-directory: iac
    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1    
      
    - name: Change Directory IAC 
      run: |
        pwd
        cd /home/runner/work/ci-cd-github/ci-cd-github/iac

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd /home/runner/work/ci-cd-github/ci-cd-github/iac
        terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCLOUD_AUTH }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd /home/runner/work/ci-cd-github/ci-cd-github/iac
        terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCLOUD_AUTH }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: |
        cd /home/runner/work/ci-cd-github/ci-cd-github/iac
        terraform apply -auto-approve 
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCLOUD_AUTH }}
